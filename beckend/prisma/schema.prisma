// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// TABELA DE ENDEREÇOS
model Endereco {
  id String @id @default(uuid())
  cep String?
  logradouro String
  numero String
  complemento String?
  bairro String
  cidade String
  uf String
  pais String
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  @@map("enderecos")

  usuarios Usuario[]
}

// TABELA DE USUÁRIOS
model Usuario {
  id String @id @default(uuid())
  cpf String
  nome String
  nascimento DateTime
  sexo String
  email String
  foto String
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  endereco Endereco @relation(fields: [endereco_id], references: [id])

  @@map("usuarios")

  endereco_id String

  colaborador Colaborador[]
  cliente Cliente[]
  representante Representante[]
}

// TABELA DE COLABORADORES
model Colaborador {
  id String @id @default(uuid())
  situacao Boolean
  cargo String
  celular String
  telefone String
  rg String
  orgao_emissor String
  carteira_trabalho String
  serie String
  pis String
  titulo_eleitor String
  zona_eleitoral String
  secao_eleitoral String
  salario_base Float
  salario_liquido Float
  complemento_salario Int
  adiantamento_salario Int
  saldo_salario Float?
  limite_credito Float
  data_admissao DateTime? @default(now())
  data_demisao DateTime?
  senha String
  obs String
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  usuario Usuario @relation(fields: [usuario_id], references: [id])
  order Order[]

  @@map("colaboradores")

  usuario_id String
}

// TABELA DE CLIENTES
model Cliente {
  id String @id @default(uuid())
  rg String?
  orgao_emissor String?
  celular String
  telefone String?
  telefone_referencia1 String
  nome_referencia1 String
  telefone_referencia2 String
  nome_referencia2 String
  telefone_referencia3 String
  nome_referencia3 String
  score String
  limite_credito Float @default(0.0)
  situacao Boolean?
  ultima_compra DateTime?
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())
  
  usuario Usuario @relation(fields: [usuario_id], references: [id])
  order Order[]

  @@map("clientes")

  usuario_id String
}

// TABELA DE REPRESENTANTES
model Representante {
  id String @id @default(uuid())
  empresa String
  celular String
  telefone String
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  usuario Usuario @relation(fields: [usuario_id], references: [id])

  @@map("representantes")
  usuario_id String
  fabrica Fabrica[]
  produto Produto[]
}

// TABELA DE FABRICA
model Fabrica {
  id String @id @default(uuid())
  empresa String
  cnpj String
  ie String
  contato String
  razaosocial String
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  representante Representante @relation(fields: [representante_id], references: [id])

  @@map("fabricas")

  representante_id String
  produto Produto[]
}

// TABELA DE SECAO
model Secao {
  id String @id @default(uuid())
  nome_secao String
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  @@map("secoes")

  produtos Produto[]
}

// TABELA DE CATEGORIA
model Categoria {
  id String @id @default(uuid())
  nome_categoria String
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  @@map("categorias")

  produtos Produto[]
}

// TABELA DE PRODUTO
model Produto {
  id String @id @default(uuid())
  nome_produto String
  marca String
  material String
  foto String?
  descricao String
  custo Float
  porcentagem_venda Int
  preco_venda Float
  margem_lucro Int
  desconto_atual Int  // em %
  desconto_maximo Int // em %
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  secao Secao @relation(fields: [secao_id], references: [id])
  categoria Categoria @relation(fields: [categoria_id], references: [id])
  fabrica Fabrica @relation(fields: [fabrica_id], references: [id])
  representante Representante @relation(fields: [representante_id], references: [id])

  produto_tamanhos_estoque ProdutoTamanhoEstoque[]
  produto_cor ProdutoCor[]
  items Item[]

  @@map("produtos")

  secao_id String
  categoria_id String
  fabrica_id String
  representante_id String
}

model ProdutoTamanhoEstoque {
  id String @id @default(uuid())
  produto Produto @relation(fields: [produto_id], references: [id])
  tamanho String
  estoque Int

  produto_id String

  @@map("produto_tamanhos_estoque")
}

model ProdutoCor {
  id String @id @default(uuid())
  produto Produto @relation(fields: [produto_id], references: [id])
  cor String

  produto_id String

  @@map("produto_cor")
}

model Order{
  id String @id @default(uuid())
  status Boolean @default(false)
  draft Boolean @default(true)
  valor_total Float
  desconto Int
  valor_pagar Float
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  colaborado Colaborador @relation(fields: [colaborador_id], references: [id])
  cliente Cliente @relation(fields: [cliente_id], references: [id])

  @@map("orders")
  items Item[]
  cliente_id String
  colaborador_id String
}

model Item{
  id String @id @default(uuid())
  qtd Int
  preco Float
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  order Order @relation(fields: [order_id], references: [id])
  produto Produto @relation(fields: [produto_id], references: [id])

  @@map("items")
  order_id String
  produto_id String
}
